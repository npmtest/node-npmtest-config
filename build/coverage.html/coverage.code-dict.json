{"/home/travis/build/npmtest/node-npmtest-config/test.js":"/* istanbul instrument in package npmtest_config */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-config/lib.npmtest_config.js":"/* istanbul instrument in package npmtest_config */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_config = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_config = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-config/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-config && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_config */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_config\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_config.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_config.rollup.js'] =\n            local.assetsDict['/assets.npmtest_config.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_config.__dirname +\n                    '/lib.npmtest_config.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-config/config/lib/config.js":"// config.js (c) 2010-2015 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://lorenwest.github.com/node-config\n\n// Dependencies\nvar Yaml = null,    // External libraries are lazy-loaded\n    VisionmediaYaml = null,  // only if these file types exist.\n    Coffee = null,\n    Iced = null,\n    CSON = null,\n    PPARSER = null,\n    JSON5 = null,\n    TOML = null,\n    HJSON = null,\n    XML = null,\n    deferConfig = require('../defer').deferConfig,\n    DeferredConfig = require('../defer').DeferredConfig,\n    RawConfig = require('../raw').RawConfig,\n    Utils = require('util'),\n    Path = require('path'),\n    FileSystem = require('fs');\n\n// Static members\nvar DEFAULT_CLONE_DEPTH = 20,\n    NODE_CONFIG, CONFIG_DIR, RUNTIME_JSON_FILENAME, NODE_ENV, APP_INSTANCE,\n    HOST, HOSTNAME, ALLOW_CONFIG_MUTATIONS, CONFIG_SKIP_GITCRYPT,\n    env = {},\n    privateUtil = {},\n    deprecationWarnings = {},\n    configSources = [],          // Configuration sources - array of {name, original, parsed}\n    checkMutability = true,      // Check for mutability/immutability on first get\n    gitCryptTestRegex = /^.GITCRYPT/; // regular expression to test for gitcrypt files.\n\n/**\n * <p>Application Configurations</p>\n *\n * <p>\n * The config module exports a singleton object representing all\n * configurations for this application deployment.\n * </p>\n *\n * <p>\n * Application configurations are stored in files within the config directory\n * of your application.  The default configuration file is loaded, followed\n * by files specific to the deployment type (development, testing, staging,\n * production, etc.).\n * </p>\n *\n * <p>\n * For example, with the following config/default.yaml file:\n * </p>\n *\n * <pre>\n *   ...\n *   customer:\n *     &nbsp;&nbsp;initialCredit: 500\n *     &nbsp;&nbsp;db:\n *       &nbsp;&nbsp;&nbsp;&nbsp;name: customer\n *       &nbsp;&nbsp;&nbsp;&nbsp;port: 5984\n *   ...\n * </pre>\n *\n * <p>\n * The following code loads the customer section into the CONFIG variable:\n * <p>\n *\n * <pre>\n *   var CONFIG = require('config').customer;\n *   ...\n *   newCustomer.creditLimit = CONFIG.initialCredit;\n *   database.open(CONFIG.db.name, CONFIG.db.port);\n *   ...\n * </pre>\n *\n * @module config\n * @class Config\n */\n\n/**\n * <p>Get the configuration object.</p>\n *\n * <p>\n * The configuration object is a shared singleton object within the application,\n * attained by calling require('config').\n * </p>\n *\n * <p>\n * Usually you'll specify a CONFIG variable at the top of your .js file\n * for file/module scope. If you want the root of the object, you can do this:\n * </p>\n * <pre>\n * var CONFIG = require('config');\n * </pre>\n *\n * <p>\n * Sometimes you only care about a specific sub-object within the CONFIG\n * object.  In that case you could do this at the top of your file:\n * </p>\n * <pre>\n * var CONFIG = require('config').customer;\n * or\n * var CUSTOMER_CONFIG = require('config').customer;\n * </pre>\n *\n * <script type=\"text/javascript\">\n *   document.getElementById(\"showProtected\").style.display = \"block\";\n * </script>\n *\n * @method constructor\n * @return CONFIG {object} - The top level configuration object\n */\nvar Config = function() {\n  var t = this;\n\n  // Bind all utility functions to this\n  for (var fnName in util) {\n    util[fnName] = util[fnName].bind(t);\n  }\n\n  // Merge configurations into this\n  util.extendDeep(t, util.loadFileConfigs());\n  util.attachProtoDeep(t);\n\n  // Perform strictness checks and possibly throw an exception.\n  util.runStrictnessChecks(t);\n};\n\n/**\n * Utilities are under the util namespace vs. at the top level\n */\nvar util = Config.prototype.util = {};\n\n/**\n * Underlying get mechanism\n *\n * @private\n * @method getImpl\n * @param object {object} - Object to get the property for\n * @param property {string | array[string]} - The property name to get (as an array or '.' delimited string)\n * @return value {mixed} - Property value, including undefined if not defined.\n */\nvar getImpl= function(object, property) {\n  var t = this,\n      elems = Array.isArray(property) ? property : property.split('.'),\n      name = elems[0],\n      value = object[name];\n  if (elems.length <= 1) {\n    return value;\n  }\n  // Note that typeof null === 'object'\n  if (value === null || typeof value !== 'object') {\n    return undefined;\n  }\n  return getImpl(value, elems.slice(1));\n};\n\n\n/**\n * <p>Get a configuration value</p>\n *\n * <p>\n * This will return the specified property value, throwing an exception if the\n * configuration isn't defined.  It is used to assure configurations are defined\n * before being used, and to prevent typos.\n * </p>\n *\n * @method get\n * @param property {string} - The configuration property to get. Can include '.' sub-properties.\n * @return value {mixed} - The property value\n */\nConfig.prototype.get = function(property) {\n  if(property === null || property === undefined){\n    throw new Error(\"Calling config.get with null or undefined argument\");\n  }\n  var t = this,\n      value = getImpl(t, property);\n\n  // Produce an exception if the property doesn't exist\n  if (value === undefined) {\n    throw new Error('Configuration property \"' + property + '\" is not defined');\n  }\n\n  // Make configurations immutable after first get (unless disabled)\n  if (checkMutability) {\n    if (!util.initParam('ALLOW_CONFIG_MUTATIONS', false)) {\n      util.makeImmutable(config);\n    }\n    checkMutability = false;\n  }\n\n  if (value instanceof RawConfig) {\n    value = value.resolve();\n  }\n\n  // Return the value\n  return value;\n};\n\n/**\n * Test that a configuration parameter exists\n *\n * <pre>\n *    var config = require('config');\n *    if (config.has('customer.dbName')) {\n *      console.log('Customer database name: ' + config.customer.dbName);\n *    }\n * </pre>\n *\n * @method has\n * @param property {string} - The configuration property to test. Can include '.' sub-properties.\n * @return isPresent {boolean} - True if the property is defined, false if not defined.\n */\nConfig.prototype.has = function(property) {\n  // While get() throws an exception for undefined input, has() is designed to test validity, so false is appropriate\n  if(property === null || property === undefined){\n    return false;\n  }\n  var t = this;\n  return (getImpl(t, property) !== undefined);\n};\n\n/**\n * <p>Monitor a javascript property for runtime changes.</p>\n *\n * <p>\n * This method was built for an earlier version of node-config that allowed\n * configuration value mutations.  Since version 1.0.0, node-config no longer\n * allows configuration mutations, and is no longer used in node-config.\n * </p>\n *\n * <p>\n * It is deprecated, and will be removed in the next semver incompatible release 2.0.0.\n * </p>\n *\n * @method watch\n * @deprecated\n * @param object {object} - The object to watch.\n * @param property {string} - The property name to watch.  Watch all object properties if null.\n * @param handler {function(object, propertyName, priorValue, newValue)} - Handler called when a property change is detected.\n *   The handler is run along with other handlers registered for notification.\n *   If your handler changes the value of the property, that change is applied after all handlers have finished processing the current change.\n *   Then all handlers (including this one) will be called again with the newly changed value.\n * @param depth {integer} (optional) - If watching all object properties or if the specified property is an object, this specifies the depth of the object graph to watch for changes.  Default 6.\n * @return object {object} - The original object is returned - for chaining.\n */\nutil.watch = function(object, property, handler, depth) {\n\n  // Initialize\n  var t = this, o = object;\n  var allProperties = property ? [property] : Object.keys(o);\n\n  // Deprecation warning\n  if (!deprecationWarnings.watch) {\n    console.error('WARNING: config.' + fnName + '() is deprecated, and will not be supported in release 2.0.');\n    console.error('WARNING: See https://github.com/lorenwest/node-config/wiki/Future-Compatibility#upcoming-incompatibilities');\n    deprecationWarnings.watch = true;\n  }\n\n  // Depth detection\n  depth = (depth === null ? DEFAULT_CLONE_DEPTH : depth);\n  if (depth < 0) {\n    return;\n  }\n\n  // Create hidden properties on the object\n  if (!o.__watchers)\n    util.makeHidden(o, '__watchers', {});\n  if (!o.__propertyValues)\n    util.makeHidden(o, '__propertyValues', {});\n\n  // Attach watchers to all requested properties\n  allProperties.forEach(function(prop){\n\n    // Setup the property for watching (first time only)\n    if (typeof(o.__propertyValues[prop]) === 'undefined') {\n\n      // Don't error re-defining the property if immutable\n      var descriptor = Object.getOwnPropertyDescriptor(o, prop);\n      if (descriptor && descriptor.writable === false)\n        return;\n\n      // Copy the value to the hidden field, and add the property to watchers\n      o.__propertyValues[prop] = [o[prop]];\n      o.__watchers[prop] = [];\n\n      // Attach the property watcher\n      Object.defineProperty(o, prop, {\n        enumerable : true,\n\n        get : function(){\n          // If more than 1 item is in the values array,\n          // then we're currently processing watchers.\n          if (o.__propertyValues[prop].length === 1)\n            // Current value\n            return o.__propertyValues[prop][0];\n          else\n            // [0] is prior value, [1] is new value being processed\n            return o.__propertyValues[prop][1];\n        },\n\n        set : function(newValue) {\n\n          // Return early if no change\n          var origValue = o[prop];\n          if (util.equalsDeep(origValue, newValue))\n            return;\n\n          // Remember the new value, and return if we're in another setter\n          o.__propertyValues[prop].push(newValue);\n          if (o.__propertyValues[prop].length > 2)\n            return;\n\n          // Call all watchers for each change requested\n          var numIterations = 0;\n          while (o.__propertyValues[prop].length > 1) {\n\n            // Detect recursion\n            if (++numIterations > 20) {\n              o.__propertyValues[prop] = [origValue];\n              throw new Error('Recursion detected while setting [' + prop + ']');\n            }\n\n            // Call each watcher for the current values\n            var oldValue = o.__propertyValues[prop][0];\n            newValue = o.__propertyValues[prop][1];\n            o.__watchers[prop].forEach(function(watcher) {\n              try {\n                watcher(o, prop, oldValue, newValue);\n              } catch (e) {\n                // Log an error and continue with subsequent watchers\n                console.error(\"Exception in object watcher for \" + prop, e);\n              }\n            });\n\n            // Done processing this value\n            o.__propertyValues[prop].splice(0,1);\n          }\n        }\n      });\n\n    } // Done setting up the property for watching (first time)\n\n    // Add the watcher to the property\n    o.__watchers[prop].push(handler);\n\n    // Recurs if this is an object...\n    if (o[prop] && typeof(o[prop]) === 'object') {\n      util.watch(o[prop], null, handler, depth - 1);\n    }\n\n  }); // Done processing each property\n\n  // Return the original object - for chaining\n  return o;\n};\n\n/**\n * <p>\n * Set default configurations for a node.js module.\n * </p>\n *\n * <p>\n * This allows module developers to attach their configurations onto the\n * default configuration object so they can be configured by the consumers\n * of the module.\n * </p>\n *\n * <p>Using the function within your module:</p>\n * <pre>\n *   var CONFIG = require(\"config\");\n *   CONFIG.util.setModuleDefaults(\"MyModule\", {\n *   &nbsp;&nbsp;templateName: \"t-50\",\n *   &nbsp;&nbsp;colorScheme: \"green\"\n *   });\n * <br>\n *   // Template name may be overridden by application config files\n *   console.log(\"Template: \" + CONFIG.MyModule.templateName);\n * </pre>\n *\n * <p>\n * The above example results in a \"MyModule\" element of the configuration\n * object, containing an object with the specified default values.\n * </p>\n *\n * @method setModuleDefaults\n * @param moduleName {string} - Name of your module.\n * @param defaultProperties {object} - The default module configuration.\n * @return moduleConfig {object} - The module level configuration object.\n */\nutil.setModuleDefaults = function (moduleName, defaultProperties) {\n\n  // Copy the properties into a new object\n  var t = this,\n    moduleConfig = util.cloneDeep(defaultProperties);\n\n  // Set module defaults into the first sources element\n  if (configSources.length === 0 || configSources[0].name !== 'Module Defaults') {\n    configSources.splice(0, 0, {\n      name: 'Module Defaults',\n      parsed: {}\n    });\n  }\n  configSources[0].parsed[moduleName] = {};\n  util.extendDeep(configSources[0].parsed[moduleName], defaultProperties);\n\n  // Create a top level config for this module if it doesn't exist\n  t[moduleName] = t[moduleName] || {};\n\n  // Extend local configurations into the module config\n  util.extendDeep(moduleConfig, t[moduleName]);\n\n  // Merge the extended configs without replacing the original\n  util.extendDeep(t[moduleName], moduleConfig);\n\n  // reset the mutability check for \"config.get\" method.\n  // we are not making t[moduleName] immutable immediately,\n  // since there might be more modifications before the first config.get\n  if (!util.initParam('ALLOW_CONFIG_MUTATIONS', false)) {\n    checkMutability = true;\n  }\n\n  // Attach handlers & watchers onto the module config object\n  return util.attachProtoDeep(t[moduleName]);\n};\n\n/**\n * <p>Make a configuration property hidden so it doesn't appear when enumerating\n * elements of the object.</p>\n *\n * <p>\n * The property still exists and can be read from and written to, but it won't\n * show up in for ... in loops, Object.keys(), or JSON.stringify() type methods.\n * </p>\n *\n * <p>\n * If the property already exists, it will be made hidden.  Otherwise it will\n * be created as a hidden property with the specified value.\n * </p>\n *\n * <p><i>\n * This method was built for hiding configuration values, but it can be applied\n * to <u>any</u> javascript object.\n * </i></p>\n *\n * <p>Example:</p>\n * <pre>\n *   var CONFIG = require('config');\n *   ...\n *\n *   // Hide the Amazon S3 credentials\n *   CONFIG.util.makeHidden(CONFIG.amazonS3, 'access_id');\n *   CONFIG.util.makeHidden(CONFIG.amazonS3, 'secret_key');\n * </pre>\n *\n * @method makeHidden\n * @param object {object} - The object to make a hidden property into.\n * @param property {string} - The name of the property to make hidden.\n * @param value {mixed} - (optional) Set the property value to this (otherwise leave alone)\n * @return object {object} - The original object is returned - for chaining.\n */\nutil.makeHidden = function(object, property, value) {\n\n  // If the new value isn't specified, just mark the property as hidden\n  if (typeof value === 'undefined') {\n    Object.defineProperty(object, property, {\n      enumerable : false\n    });\n  }\n  // Otherwise set the value and mark it as hidden\n  else {\n    Object.defineProperty(object, property, {\n      value      : value,\n      enumerable : false\n    });\n  }\n\n  return object;\n}\n\n/**\n * <p>Make a javascript object property immutable (assuring it cannot be changed\n * from the current value).</p>\n * <p>\n * If the specified property is an object, all attributes of that object are\n * made immutable, including properties of contained objects, recursively.\n * If a property name isn't supplied, all properties of the object are made\n * immutable.\n * </p>\n * <p>\n *\n * </p>\n * <p>\n * New properties can be added to the object and those properties will not be\n * immutable unless this method is called on those new properties.\n * </p>\n * <p>\n * This operation cannot be undone.\n * </p>\n *\n * <p>Example:</p>\n * <pre>\n *   var config = require('config');\n *   var myObject = {hello:'world'};\n *   config.util.makeImmutable(myObject);\n * </pre>\n *\n * @method makeImmutable\n * @param object {object} - The object to specify immutable properties for\n * @param [property] {string | [string]} - The name of the property (or array of names) to make immutable.\n *        If not provided, all owned properties of the object are made immutable.\n * @param [value] {mixed | [mixed]} - Property value (or array of values) to set\n *        the property to before making immutable. Only used when setting a single\n *        property. Retained for backward compatibility.\n * @return object {object} - The original object is returned - for chaining.\n */\nutil.makeImmutable = function(object, property, value) {\n  var properties = null;\n\n  // Backwards compatibility mode where property/value can be specified\n  if (typeof property === 'string') {\n    return Object.defineProperty(object, property, {\n      value : (typeof value === 'undefined') ? object[property] : value,\n      writable : false,\n      configurable: false\n    });\n  }\n\n  // Get the list of properties to work with\n  if (Array.isArray(property)) {\n    properties = property;\n  }\n  else {\n    properties = Object.keys(object);\n  }\n\n  // Process each property\n  for (var i = 0; i < properties.length; i++) {\n    var propertyName = properties[i],\n        value = object[propertyName];\n    \n    if (!(value instanceof RawConfig)) {\n      Object.defineProperty(object, propertyName, {\n        value: value,\n        writable : false,\n        configurable: false\n      });\n\n      // Call recursively if an object.\n      if (util.isObject(value)) {\n        util.makeImmutable(value);\n      }\n    }\n  }\n\n  return object;\n};\n\n/**\n * Return the sources for the configurations\n *\n * <p>\n * All sources for configurations are stored in an array of objects containing\n * the source name (usually the filename), the original source (as a string),\n * and the parsed source as an object.\n * </p>\n *\n * @method getConfigSources\n * @return configSources {Array[Object]} - An array of objects containing\n *    name, original, and parsed elements\n */\nutil.getConfigSources = function() {\n  var t = this;\n  return configSources.slice(0);\n};\n\n/**\n * Load the individual file configurations.\n *\n * <p>\n * This method builds a map of filename to the configuration object defined\n * by the file.  The search order is:\n * </p>\n *\n * <pre>\n *   default.EXT\n *   (deployment).EXT\n *   (hostname).EXT\n *   (hostname)-(deployment).EXT\n *   local.EXT\n *   local-(deployment).EXT\n *   runtime.json\n * </pre>\n *\n * <p>\n * EXT can be yml, yaml, coffee, iced, json, cson or js signifying the file type.\n * yaml (and yml) is in YAML format, coffee is a coffee-script, iced is iced-coffee-script,\n * json is in JSON format, cson is in CSON format, properties is in .properties format\n * (http://en.wikipedia.org/wiki/.properties), and js is a javascript executable file that is\n * require()'d with module.exports being the config object.\n * </p>\n *\n * <p>\n * hostname is the $HOST environment variable (or --HOST command line parameter)\n * if set, otherwise the $HOSTNAME environment variable (or --HOSTNAME command\n * line parameter) if set, otherwise the hostname found from\n * require('os').hostname().\n * </p>\n *\n * <p>\n * Once a hostname is found, everything from the first period ('.') onwards\n * is removed. For example, abc.example.com becomes abc\n * </p>\n *\n * <p>\n * (deployment) is the deployment type, found in the $NODE_ENV environment\n * variable or --NODE_ENV command line parameter.  Defaults to 'development'.\n * </p>\n *\n * <p>\n * The runtime.json file contains configuration changes made at runtime either\n * manually, or by the application setting a configuration value.\n * </p>\n *\n * <p>\n * If the $NODE_APP_INSTANCE environment variable (or --NODE_APP_INSTANCE\n * command line parameter) is set, then files with this appendage will be loaded.\n * See the Multiple Application Instances section of the main documentaion page\n * for more information.\n * </p>\n *\n * @protected\n * @method loadFileConfigs\n * @return config {Object} The configuration object\n */\nutil.loadFileConfigs = function(configDir) {\n\n  // Initialize\n  var t = this,\n      config = {};\n\n  // Initialize parameters from command line, environment, or default\n  NODE_ENV = util.initParam('NODE_ENV', 'development');\n  CONFIG_DIR = configDir || util.initParam('NODE_CONFIG_DIR', Path.join( process.cwd(), 'config') );\n  if (CONFIG_DIR.indexOf('.') === 0) {\n    CONFIG_DIR = Path.join(process.cwd() , CONFIG_DIR);\n  }\n  APP_INSTANCE = util.initParam('NODE_APP_INSTANCE');\n  HOST = util.initParam('HOST');\n  HOSTNAME = util.initParam('HOSTNAME');\n  CONFIG_SKIP_GITCRYPT = util.initParam('CONFIG_SKIP_GITCRYPT');\n\n  // This is for backward compatibility\n  RUNTIME_JSON_FILENAME = util.initParam('NODE_CONFIG_RUNTIME_JSON', Path.join(CONFIG_DIR , 'runtime.json') );\n\n  // Determine the host name from the OS module, $HOST, or $HOSTNAME\n  // Remove any . appendages, and default to null if not set\n  try {\n    var hostName = HOST || HOSTNAME;\n\n    // Store the hostname that won.\n    env.HOSTNAME = hostName;\n\n    if (!hostName) {\n        var OS = require('os');\n        hostName = OS.hostname();\n    }\n  } catch (e) {\n    hostName = '';\n  }\n\n  // Read each file in turn\n  var baseNames = ['default', NODE_ENV];\n\n  // #236: Also add full hostname when they are different.\n  if ( hostName ) {\n    var firstDomain = hostName.split('.')[0];\n\n    // Backward compatibility\n    baseNames.push(firstDomain, firstDomain + '-' + NODE_ENV);\n\n    // Add full hostname when it is not the same\n    if ( hostName != firstDomain ) {\n      baseNames.push(hostName, hostName + '-' + NODE_ENV);\n    }\n  }\n\n  baseNames.push('local', 'local-' + NODE_ENV);\n\n  var extNames = ['js', 'json', 'json5', 'hjson', 'toml', 'coffee', 'iced', 'yaml', 'yml', 'cson', 'properties', 'xml'];\n  baseNames.forEach(function(baseName) {\n    extNames.forEach(function(extName) {\n\n      // Try merging the config object into this object\n      var fullFilename = Path.join(CONFIG_DIR , baseName + '.' + extName);\n      var configObj = util.parseFile(fullFilename);\n      if (configObj) {\n        util.extendDeep(config, configObj);\n      }\n\n      // See if the application instance file is available\n      if (APP_INSTANCE) {\n        fullFilename = Path.join(CONFIG_DIR, baseName + '-' + APP_INSTANCE + '.' + extName);\n        configObj = util.parseFile(fullFilename);\n        if (configObj) {\n          util.extendDeep(config, configObj);\n        }\n      }\n    });\n  });\n\n  // Override configurations from the $NODE_CONFIG environment variable\n  // NODE_CONFIG only applies to the base config\n  if (!configDir) {\n    var envConfig = {};\n    if (process.env.NODE_CONFIG) {\n      try {\n        envConfig = JSON.parse(process.env.NODE_CONFIG);\n      } catch(e) {\n        console.error('The $NODE_CONFIG environment variable is malformed JSON');\n      }\n      util.extendDeep(config, envConfig);\n      configSources.push({\n        name: \"$NODE_CONFIG\",\n        parsed: envConfig,\n      });\n    }\n\n    // Override configurations from the --NODE_CONFIG command line\n    var cmdLineConfig = util.getCmdLineArg('NODE_CONFIG');\n    if (cmdLineConfig) {\n      try {\n        cmdLineConfig = JSON.parse(cmdLineConfig);\n      } catch(e) {\n        console.error('The --NODE_CONFIG={json} command line argument is malformed JSON');\n      }\n      util.extendDeep(config, cmdLineConfig);\n      configSources.push({\n        name: \"--NODE_CONFIG argument\",\n        parsed: cmdLineConfig,\n      });\n    }\n\n    // Place the mixed NODE_CONFIG into the environment\n    env['NODE_CONFIG'] = JSON.stringify(util.extendDeep(envConfig, cmdLineConfig, {}));\n  }\n\n  // Override with environment variables if there is a custom-environment-variables.EXT mapping file\n  var customEnvVars = util.getCustomEnvVars(CONFIG_DIR, extNames);\n  util.extendDeep(config, customEnvVars);\n\n  // Extend the original config with the contents of runtime.json (backwards compatibility)\n  var runtimeJson = util.parseFile(RUNTIME_JSON_FILENAME) || {};\n  util.extendDeep(config, runtimeJson);\n\n  util.resolveDeferredConfigs(config);\n\n  // Return the configuration object\n  return config;\n};\n\n// Using basic recursion pattern, find all the deferred values and resolve them.\nutil.resolveDeferredConfigs = function (config) {\n  var completeConfig = config;\n\n\n  function _iterate (prop) {\n\n    // We put the properties we are going to look it in an array to keep the order predictable\n    var propsToSort = [];\n\n    // First step is to put the properties of interest in an array\n    for (var property in prop) {\n      if (prop.hasOwnProperty(property) && prop[property] != null) {\n        propsToSort.push(property);\n      }\n    }\n\n    // Second step is to iterate of the elements in a predictable (sorted) order\n    propsToSort.sort().forEach(function (property) {\n      if (prop[property].constructor == Object) {\n        _iterate(prop[property]);\n      } else if (prop[property].constructor == Array) {\n        for (var i = 0; i < prop[property].length; i++) {\n          _iterate(prop[property][i]);\n        }\n      } else {\n        if (prop[property] instanceof DeferredConfig ) {\n          prop[property]= prop[property].resolve.call(completeConfig,completeConfig, prop[property]._original);\n        }\n        else {\n          // Nothing to do. Keep the property how it is.\n        }\n      }\n    });\n  }\n\n    _iterate(config);\n}\n\n/**\n * Parse and return the specified configuration file.\n *\n * If the file exists in the application config directory, it will\n * parse and return it as a JavaScript object.\n *\n * The file extension determines the parser to use.\n *\n * .js = File to run that has a module.exports containing the config object\n * .coffee = File to run that has a module.exports with coffee-script containing the config object\n * .iced = File to run that has a module.exports with iced-coffee-script containing the config object\n * All other supported file types (yaml, toml, json, cson, hjson, json5, properties, xml)\n * are parsed with util.parseString.\n *\n * If the file doesn't exist, a null will be returned.  If the file can't be\n * parsed, an exception will be thrown.\n *\n * This method performs synchronous file operations, and should not be called\n * after synchronous module loading.\n *\n * @protected\n * @method parseFile\n * @param fullFilename {string} The full file path and name\n * @return {configObject} The configuration object parsed from the file\n */\nutil.parseFile = function(fullFilename) {\n\n  // Initialize\n  var t = this,\n      extension = fullFilename.substr(fullFilename.lastIndexOf('.') + 1),\n      configObject = null,\n      fileContent = null,\n      stat = null;\n\n  // Return null if the file doesn't exist.\n  // Note that all methods here are the Sync versions.  This is appropriate during\n  // module loading (which is a synchronous operation), but not thereafter.\n  try {\n    stat = FileSystem.statSync(fullFilename);\n    if (!stat || stat.size < 1) {\n      return null;\n    }\n  } catch (e1) {\n    return null\n  }\n\n  // Try loading the file.\n  try {\n    fileContent = FileSystem.readFileSync(fullFilename, 'UTF-8');\n    fileContent = fileContent.replace(/^\\uFEFF/, '');\n  }\n  catch (e2) {\n    throw new Error('Config file ' + fullFilename + ' cannot be read');\n  }\n\n  // Parse the file based on extension\n  try {\n\n    // skip if it's a gitcrypt file and CONFIG_SKIP_GITCRYPT is true\n    if (CONFIG_SKIP_GITCRYPT) {\n      if (gitCryptTestRegex.test(fileContent)) {\n        console.error('WARNING: ' + fullFilename + ' is a git-crypt file and CONFIG_SKIP_GITCRYPT is set. skipping.');\n        return null;\n      }\n    }\n\n    if (extension === 'js') {\n      // Use the built-in parser for .js files\n      configObject = require(fullFilename);\n    }\n    else if (extension === 'coffee') {\n      // .coffee files can be loaded with either coffee-script or iced-coffee-script.\n      // Prefer iced-coffee-script, if it exists.\n      // Lazy load the appropriate extension\n      if (!Coffee) {\n        Coffee = {};\n\n        // The following enables iced-coffee-script on .coffee files, if iced-coffee-script is available.\n        // This is commented as per a decision on a pull request.\n        //try {\n        //  Coffee = require(\"iced-coffee-script\");\n        //}\n        //catch (e) {\n        //  Coffee = require(\"coffee-script\");\n        //}\n\n        Coffee = require(\"coffee-script\");\n\n        // coffee-script >= 1.7.0 requires explicit registration for require() to work\n        if (Coffee.register) {\n          Coffee.register();\n        }\n      }\n      // Use the built-in parser for .coffee files with coffee-script\n      configObject = require(fullFilename);\n    }\n    else if (extension === 'iced') {\n      Iced = require(\"iced-coffee-script\");\n\n      // coffee-script >= 1.7.0 requires explicit registration for require() to work\n      if (Iced.register) {\n        Iced.register();\n      }\n    }\n    else {\n      configObject = util.parseString(fileContent, extension);\n    }\n  }\n  catch (e3) {\n    if (gitCryptTestRegex.test(fileContent)) {\n      console.error('ERROR: ' + fullFilename + ' is a git-crypt file and CONFIG_SKIP_GITCRYPT is not set.');\n    }\n    throw new Error(\"Cannot parse config file: '\" + fullFilename + \"': \" + e3);\n  }\n\n  // Keep track of this configuration sources, including empty ones\n  if (typeof configObject === 'object') {\n    configSources.push({\n      name: fullFilename,\n      original: fileContent,\n      parsed: configObject,\n    });\n  }\n\n  return configObject;\n};\n\n/**\n * Parse and return the specied string with the specified format.\n *\n * The format determines the parser to use.\n *\n * json = File is parsed using JSON.parse()\n * yaml (or yml) = Parsed with a YAML parser\n * toml = Parsed with a TOML parser\n * cson = Parsed with a CSON parser\n * hjson = Parsed with a HJSON parser\n * json5 = Parsed with a JSON5 parser\n * properties = Parsed with the 'properties' node package\n * xml = Parsed with a XML parser\n *\n * If the file doesn't exist, a null will be returned.  If the file can't be\n * parsed, an exception will be thrown.\n *\n * This method performs synchronous file operations, and should not be called\n * after synchronous module loading.\n *\n * @protected\n * @method parseString\n * @param content {string} The full content\n * @param format {string} The format to be parsed\n * @return {configObject} The configuration object parsed from the string\n */\nutil.parseString = function (content, format) {\n  // Initialize\n  var configObject = null;\n\n  // Parse the file based on extension\n  if (format === 'yaml' || format === 'yml') {\n    if (!Yaml && !VisionmediaYaml) {\n      // Lazy loading\n      try {\n        // Try to load the better js-yaml module\n        Yaml = require('js-yaml');\n      }\n      catch (e) {\n        try {\n          // If it doesn't exist, load the fallback visionmedia yaml module.\n          VisionmediaYaml = require('yaml');\n        }\n        catch (e) { }\n      }\n    }\n\n    if (Yaml) {\n      configObject = Yaml.load(content);\n    }\n    else if (VisionmediaYaml) {\n      // The yaml library doesn't like strings that have newlines but don't\n      // end in a newline: https://github.com/visionmedia/js-yaml/issues/issue/13\n      content += '\\n';\n      configObject = VisionmediaYaml.eval(util.stripYamlComments(content));\n    }\n    else {\n      console.error(\"No YAML parser loaded.  Suggest adding js-yaml dependency to your package.json file.\")\n    }\n  }\n  else if (format === 'json') {\n    try {\n      configObject = JSON.parse(content);\n    }\n    catch (e) {\n      // All JS Style comments will begin with /, so all JSON parse errors that\n      // encountered a syntax error will complain about this character.\n      if (e.name !== 'SyntaxError' || e.message.indexOf('Unexpected token /') !== 0) {\n        throw e;\n      }\n\n      if (!JSON5) {\n        JSON5 = require('json5');\n      }\n\n      configObject = JSON5.parse(content);\n    }\n  }\n  else if (format === 'json5') {\n\n    if (!JSON5) {\n      JSON5 = require('json5');\n    }\n\n    configObject = JSON5.parse(content);\n\n  } else if (format === 'hjson') {\n\n    if (!HJSON) {\n      HJSON = require('hjson');\n    }\n\n    configObject = HJSON.parse(content);\n\n  } else if (format === 'toml') {\n\n    if(!TOML) {\n      TOML = require('toml');\n    }\n\n    configObject = TOML.parse(content);\n  }\n  else if (format === 'cson') {\n    if (!CSON) {\n      CSON = require('cson');\n    }\n    // Allow comments in CSON files\n    if (typeof CSON.parseSync === 'function') {\n      configObject = CSON.parseSync(util.stripComments(content));\n    } else {\n      configObject = CSON.parse(util.stripComments(content));\n    }\n  }\n  else if (format === 'properties') {\n    if (!PPARSER) {\n      PPARSER = require('properties');\n    }\n    configObject = PPARSER.parse(content, { namespaces: true, variables: true, sections: true });\n  } else if (format === 'xml') {\n\n    if (!XML) {\n      XML = require('x2js');\n    }\n\n    var x2js = new XML();\n    configObject = x2js.xml2js(content);\n    var rootKeys = Object.keys(configObject);\n    if(rootKeys.length == 1) {\n      configObject = configObject[rootKeys[0]];\n    }\n  }\n\n  return configObject;\n};\n\n/**\n * Attach the Config class prototype to all config objects recursively.\n *\n * <p>\n * This allows you to do anything with CONFIG sub-objects as you can do with\n * the top-level CONFIG object.  It's so you can do this:\n * </p>\n *\n * <pre>\n *   var CUST_CONFIG = require('config').Customer;\n *   CUST_CONFIG.get(...)\n * </pre>\n *\n * @protected\n * @method attachProtoDeep\n * @param toObject\n * @param depth\n * @return toObject\n */\nutil.attachProtoDeep = function(toObject, depth) {\n  if (toObject instanceof RawConfig) {\n    return toObject;\n  }\n\n  // Recursion detection\n  var t = this;\n  depth = (depth === null ? DEFAULT_CLONE_DEPTH : depth);\n  if (depth < 0) {\n    return toObject;\n  }\n\n  // Adding Config.prototype methods directly to toObject as hidden properties\n  // because adding to toObject.__proto__ exposes the function in toObject\n  for (var fnName in Config.prototype) {\n    if (!toObject[fnName]) {\n      util.makeHidden(toObject, fnName, Config.prototype[fnName]);\n    }\n  }\n\n  // Add prototypes to sub-objects\n  for (var prop in toObject) {\n    if (util.isObject(toObject[prop])) {\n      util.attachProtoDeep(toObject[prop], depth - 1);\n    }\n  }\n\n  // Return the original object\n  return toObject;\n};\n\n/**\n * Return a deep copy of the specified object.\n *\n * This returns a new object with all elements copied from the specified\n * object.  Deep copies are made of objects and arrays so you can do anything\n * with the returned object without affecting the input object.\n *\n * @protected\n * @method cloneDeep\n * @param parent {object} The original object to copy from\n * @param [depth=20] {Integer} Maximum depth (default 20)\n * @return {object} A new object with the elements copied from the copyFrom object\n *\n * This method is copied from https://github.com/pvorb/node-clone/blob/17eea36140d61d97a9954c53417d0e04a00525d9/clone.js\n *\n * Copyright © 2011-2014 Paul Vorbach and contributors.\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the “Software”), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions: The above copyright notice and this permission\n * notice shall be included in all copies or substantial portions of the Software.\n */\nutil.cloneDeep = function cloneDeep(parent, depth, circular, prototype) {\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular === 'undefined')\n    circular = true;\n\n  if (typeof depth === 'undefined')\n    depth = 20;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (Utils.isArray(parent)) {\n      child = [];\n    } else if (Utils.isRegExp(parent)) {\n      child = new RegExp(parent.source, util.getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (Utils.isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      child = new Buffer(parent.length);\n      parent.copy(child);\n      return child;\n    } else {\n      if (typeof prototype === 'undefined') child = Object.create(Object.getPrototypeOf(parent));\n      else child = Object.create(prototype);\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (var i in parent) {\n      var propDescriptor  = Object.getOwnPropertyDescriptor(parent,i);\n      var hasGetter = ((propDescriptor !== undefined) && (propDescriptor.get !== undefined));\n\n      if (hasGetter){\n        Object.defineProperty(child,i,propDescriptor);\n      } else {\n        child[i] = _clone(parent[i], depth - 1);\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n};\n\n/**\n * Set objects given a path as a string list\n *\n * @protected\n * @method setPath\n * @param object {object} - Object to set the property on\n * @param path {array[string]} - Array path to the property\n * @param value {mixed} - value to set, ignoring null\n */\nutil.setPath = function (object, path, value) {\n  var nextKey = null;\n  if (value === null || path.length === 0) {\n    return;\n  }\n  else if (path.length === 1) { // no more keys to make, so set the value\n    object[path.shift()] = value;\n  }\n  else {\n    nextKey = path.shift();\n    if (!object.hasOwnProperty(nextKey)) {\n      object[nextKey] = {};\n    }\n    util.setPath(object[nextKey], path, value);\n  }\n};\n\n/**\n * Create a new object patterned after substitutionMap, where:\n * 1. Terminal string values in substitutionMap are used as keys\n * 2. To look up values in a key-value store, variables\n * 3. And parent keys are created as necessary to retain the structure of substitutionMap.\n *\n * @protected\n * @method substituteDeep\n * @param substitionMap {object} - an object whose terminal (non-subobject) values are strings\n * @param variables {object[string:value]} - usually process.env, a flat object used to transform\n *      terminal values in a copy of substititionMap.\n * @returns {object} - deep copy of substitutionMap with only those paths whose terminal values\n *      corresponded to a key in `variables`\n */\nutil.substituteDeep = function (substitutionMap, variables) {\n  var result = {};\n\n  function _substituteVars(map, vars, pathTo) {\n    for (var prop in map) {\n      var value = map[prop];\n      if (typeof(value) === 'string') { // We found a leaf variable name\n        if (vars[value]) { // if the vars provide a value set the value in the result map\n          util.setPath(result, pathTo.concat(prop), vars[value]);\n        }\n      }\n      else if (util.isObject(value)) { // work on the subtree, giving it a clone of the pathTo\n        if('__name' in value && '__format' in value && vars[value.__name]) {\n          var parsedValue = util.parseString(vars[value.__name], value.__format);\n          util.setPath(result, pathTo.concat(prop), parsedValue);\n        } else {\n          _substituteVars(value, vars, pathTo.concat(prop));\n        }\n      }\n      else {\n        msg = \"Illegal key type for substitution map at \" + pathTo.join('.') + ': ' + typeof(value);\n        throw Error(msg);\n      }\n    }\n  }\n\n  _substituteVars(substitutionMap, variables, []);\n  return result;\n\n};\n\n/* Map environment variables into the configuration if a mapping file,\n * `custom-environment-variables.EXT` exists.\n *\n * @protected\n * @method getCustomEnvVars\n * @param CONFIG_DIR {string} - the passsed configuration directory\n * @param extNames {Array[string]} - acceptable configuration file extension names.\n * @returns {object} - mapped environment variables or {} if there are none\n */\nutil.getCustomEnvVars = function (CONFIG_DIR, extNames) {\n  var result = {};\n  extNames.forEach(function (extName) {\n    var fullFilename = Path.join(CONFIG_DIR , 'custom-environment-variables' + '.' + extName);\n    var configObj = util.parseFile(fullFilename);\n    if (configObj) {\n      var environmentSubstitutions = util.substituteDeep(configObj, process.env);\n      util.extendDeep(result, environmentSubstitutions);\n    }\n  });\n  return result;\n};\n\n/**\n * Return true if two objects have equal contents.\n *\n * @protected\n * @method equalsDeep\n * @param object1 {object} The object to compare from\n * @param object2 {object} The object to compare with\n * @param depth {integer} An optional depth to prevent recursion.  Default: 20.\n * @return {boolean} True if both objects have equivalent contents\n */\nutil.equalsDeep = function(object1, object2, depth) {\n\n  // Recursion detection\n  var t = this;\n  depth = (depth === null ? DEFAULT_CLONE_DEPTH : depth);\n  if (depth < 0) {\n    return {};\n  }\n\n  // Fast comparisons\n  if (!object1 || !object2) {\n    return false;\n  }\n  if (object1 === object2) {\n    return true;\n  }\n  if (typeof(object1) != 'object' || typeof(object2) != 'object') {\n    return false;\n  }\n\n  // They must have the same keys.  If their length isn't the same\n  // then they're not equal.  If the keys aren't the same, the value\n  // comparisons will fail.\n  if (Object.keys(object1).length != Object.keys(object2).length) {\n    return false;\n  }\n\n  // Compare the values\n  for (var prop in object1) {\n\n    // Call recursively if an object or array\n    if (object1[prop] && typeof(object1[prop]) === 'object') {\n      if (!util.equalsDeep(object1[prop], object2[prop], depth - 1)) {\n        return false;\n      }\n    }\n    else {\n      if (object1[prop] !== object2[prop]) {\n        return false;\n      }\n    }\n  }\n\n  // Test passed.\n  return true;\n};\n\n/**\n * Returns an object containing all elements that differ between two objects.\n * <p>\n * This method was designed to be used to create the runtime.json file\n * contents, but can be used to get the diffs between any two Javascript objects.\n * </p>\n * <p>\n * It works best when object2 originated by deep copying object1, then\n * changes were made to object2, and you want an object that would give you\n * the changes made to object1 which resulted in object2.\n * </p>\n *\n * @protected\n * @method diffDeep\n * @param object1 {object} The base object to compare to\n * @param object2 {object} The object to compare with\n * @param depth {integer} An optional depth to prevent recursion.  Default: 20.\n * @return {object} A differential object, which if extended onto object1 would\n *                  result in object2.\n */\nutil.diffDeep = function(object1, object2, depth) {\n\n  // Recursion detection\n  var t = this, diff = {};\n  depth = (depth === null ? DEFAULT_CLONE_DEPTH : depth);\n  if (depth < 0) {\n    return {};\n  }\n\n  // Process each element from object2, adding any element that's different\n  // from object 1.\n  for (var parm in object2) {\n    var value1 = object1[parm];\n    var value2 = object2[parm];\n    if (value1 && value2 && util.isObject(value2)) {\n      if (!(util.equalsDeep(value1, value2))) {\n        diff[parm] = util.diffDeep(value1, value2, depth - 1);\n      }\n    }\n    else if (Array.isArray(value1) && Array.isArray(value2)) {\n      if(!util.equalsDeep(value1, value2)) {\n        diff[parm] = value2;\n      }\n    }\n    else if (value1 !== value2){\n      diff[parm] = value2;\n    }\n  }\n\n  // Return the diff object\n  return diff;\n\n};\n\n/**\n * Extend an object, and any object it contains.\n *\n * This does not replace deep objects, but dives into them\n * replacing individual elements instead.\n *\n * @protected\n * @method extendDeep\n * @param mergeInto {object} The object to merge into\n * @param mergeFrom... {object...} - Any number of objects to merge from\n * @param depth {integer} An optional depth to prevent recursion.  Default: 20.\n * @return {object} The altered mergeInto object is returned\n */\nutil.extendDeep = function(mergeInto) {\n\n  // Initialize\n  var t = this;\n  var vargs = Array.prototype.slice.call(arguments, 1);\n  var depth = vargs.pop();\n  if (typeof(depth) != 'number') {\n    vargs.push(depth);\n    depth = DEFAULT_CLONE_DEPTH;\n  }\n\n  // Recursion detection\n  if (depth < 0) {\n    return mergeInto;\n  }\n\n  // Cycle through each object to extend\n  vargs.forEach(function(mergeFrom) {\n\n    // Cycle through each element of the object to merge from\n    for (var prop in mergeFrom) {\n\n      // save original value in deferred elements\n      var fromIsDeferredFunc = mergeFrom[prop] instanceof DeferredConfig;\n      var isDeferredFunc = mergeInto[prop] instanceof DeferredConfig;\n\n      if (fromIsDeferredFunc && mergeInto.hasOwnProperty(prop)) {\n        mergeFrom[prop]._original = isDeferredFunc ? mergeInto[prop]._original : mergeInto[prop];\n      }\n      // Extend recursively if both elements are objects and target is not really a deferred function\n      if (mergeFrom[prop] instanceof Date) {\n        mergeInto[prop] = mergeFrom[prop];\n      } else if (util.isObject(mergeInto[prop]) && util.isObject(mergeFrom[prop]) && !isDeferredFunc) {\n        util.extendDeep(mergeInto[prop], mergeFrom[prop], depth - 1);\n      }\n\n      // Copy recursively if the mergeFrom element is an object (or array or fn)\n      else if (mergeFrom[prop] && typeof mergeFrom[prop] === 'object') {\n        mergeInto[prop] = util.cloneDeep(mergeFrom[prop], depth -1);\n      }\n\n      // Copy property descriptor otherwise, preserving accessors\n      else if (Object.getOwnPropertyDescriptor(Object(mergeFrom), prop)){\n          Object.defineProperty(mergeInto, prop, Object.getOwnPropertyDescriptor(Object(mergeFrom), prop));\n      } else {\n          mergeInto[prop] = mergeFrom[prop];\n      }\n    }\n  });\n\n  // Chain\n  return mergeInto;\n\n};\n\n/**\n * Strip YAML comments from the string\n *\n * The 2.0 yaml parser doesn't allow comment-only or blank lines.  Strip them.\n *\n * @protected\n * @method stripYamlComments\n * @param fileString {string} The string to strip comments from\n * @return {string} The string with comments stripped.\n */\nutil.stripYamlComments = function(fileStr) {\n  // First replace removes comment-only lines\n  // Second replace removes blank lines\n  return fileStr.replace(/^\\s*#.*/mg,'').replace(/^\\s*[\\n|\\r]+/mg,'');\n}\n\n/**\n * Strip all Javascript type comments from the string.\n *\n * The string is usually a file loaded from the O/S, containing\n * newlines and javascript type comments.\n *\n * Thanks to James Padolsey, and all who contributed to this implementation.\n * http://james.padolsey.com/javascript/javascript-comment-removal-revisted/\n *\n * @protected\n * @method stripComments\n * @param fileString {string} The string to strip comments from\n * @param stringRegex {RegExp} Optional regular expression to match strings that\n *   make up the config file\n * @return {string} The string with comments stripped.\n */\nutil.stripComments = function(fileStr, stringRegex) {\n  stringRegex = stringRegex || /(['\"])(\\\\\\1|.)+?\\1/g;\n\n  var uid = '_' + +new Date(),\n      primitives = [],\n      primIndex = 0;\n\n  return (\n    fileStr\n\n    /* Remove strings */\n    .replace(stringRegex, function(match){\n      primitives[primIndex] = match;\n      return (uid + '') + primIndex++;\n    })\n\n    /* Remove Regexes */\n    .replace(/([^\\/])(\\/(?!\\*|\\/)(\\\\\\/|.)+?\\/[gim]{0,3})/g, function(match, $1, $2){\n      primitives[primIndex] = $2;\n      return $1 + (uid + '') + primIndex++;\n    })\n\n    /*\n    - Remove single-line comments that contain would-be multi-line delimiters\n        E.g. // Comment /* <--\n    - Remove multi-line comments that contain would be single-line delimiters\n        E.g. /* // <--\n   */\n    .replace(/\\/\\/.*?\\/?\\*.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]*?\\/\\/[\\s\\S]*?\\*\\//g, '')\n\n    /*\n    Remove single and multi-line comments,\n    no consideration of inner-contents\n   */\n    .replace(/\\/\\/.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]+?\\*\\//g, '')\n\n    /*\n    Remove multi-line comments that have a replaced ending (string/regex)\n    Greedy, so no inner strings/regexes will stop it.\n   */\n    .replace(RegExp('\\\\/\\\\*[\\\\s\\\\S]+' + uid + '\\\\d+', 'g'), '')\n\n    /* Bring back strings & regexes */\n    .replace(RegExp(uid + '(\\\\d+)', 'g'), function(match, n){\n      return primitives[n];\n    })\n  );\n\n};\n\n/**\n * Is the specified argument a regular javascript object?\n *\n * The argument is an object if it's a JS object, but not an array.\n *\n * @protected\n * @method isObject\n * @param arg {MIXED} An argument of any type.\n * @return {boolean} TRUE if the arg is an object, FALSE if not\n */\nutil.isObject = function(obj) {\n  return (obj !== null) && (typeof obj === 'object') && !(Array.isArray(obj));\n};\n\n/**\n * <p>Initialize a parameter from the command line or process environment</p>\n *\n * <p>\n * This method looks for the parameter from the command line in the format\n * --PARAMETER=VALUE, then from the process environment, then from the\n * default specified as an argument.\n * </p>\n *\n * @method initParam\n * @param paramName {String} Name of the parameter\n * @param [defaultValue] {Any} Default value of the parameter\n * @return {Any} The found value, or default value\n */\nutil.initParam = function (paramName, defaultValue) {\n  var t = this;\n\n  // Record and return the value\n  var value = util.getCmdLineArg(paramName) || process.env[paramName] || defaultValue;\n  env[paramName] = value;\n  return value;\n}\n\n/**\n * <p>Get Command Line Arguments</p>\n *\n * <p>\n * This method allows you to retrieve the value of the specified command line argument.\n * </p>\n *\n * <p>\n * The argument is case sensitive, and must be of the form '--ARG_NAME=value'\n * </p>\n *\n * @method getCmdLineArg\n * @param searchFor {STRING} The argument name to search for\n * @return {MIXED} FALSE if the argument was not found, the argument value if found\n */\nutil.getCmdLineArg = function (searchFor) {\n    var cmdLineArgs = process.argv.slice(2, process.argv.length),\n        argName = '--' + searchFor + '=';\n\n    for (var argvIt = 0; argvIt < cmdLineArgs.length; argvIt++) {\n      if (cmdLineArgs[argvIt].indexOf(argName) === 0) {\n        return cmdLineArgs[argvIt].substr(argName.length);\n      }\n    }\n\n    return false;\n}\n\n/**\n * <p>Get a Config Environment Variable Value</p>\n *\n * <p>\n * This method returns the value of the specified config environment variable,\n * including any defaults or overrides.\n * </p>\n *\n * @method getEnv\n * @param varName {STRING} The environment variable name\n * @return value {String} The value of the environment variable\n */\nutil.getEnv = function (varName) {\n  return env[varName];\n}\n\n\n\n/**\n * Returns a string of flags for regular expression `re`.\n *\n * @param {RegExp} re Regular expression\n * @returns {string} Flags\n */\nutil.getRegExpFlags = function (re) {\n  var flags = '';\n  re.global && (flags += 'g');\n  re.ignoreCase && (flags += 'i');\n  re.multiline && (flags += 'm');\n  return flags;\n};\n\n// Run strictness checks on NODE_ENV and NODE_APP_INSTANCE and throw an error if there's a problem.\nutil.runStrictnessChecks = function (config) {\n  var sources = config.util.getConfigSources();\n\n  var sourceFilenames = sources.map(function (src) {\n    return Path.basename(src.name);\n  });\n\n\n  // Throw an exception if there's no explicit config file for NODE_ENV\n  var anyFilesMatchEnv = sourceFilenames.some(function (filename) {\n      return filename.match(NODE_ENV);\n  });\n  // development is special-cased because it's the default value\n  if (NODE_ENV && (NODE_ENV !== 'development') && !anyFilesMatchEnv) {\n    _warnOrThrow(\"NODE_ENV value of '\"+NODE_ENV+\"' did not match any deployment config file names.\");\n  }\n\n  // Throw an exception if there's no explict config file for NODE_APP_INSTANCE\n  var anyFilesMatchInstance = sourceFilenames.some(function (filename) {\n      return filename.match(APP_INSTANCE);\n  });\n  if (APP_INSTANCE && !anyFilesMatchInstance) {\n    _warnOrThrow(\"NODE_APP_INSTANCE value of '\"+APP_INSTANCE+\"' did not match any instance config file names.\");\n  }\n\n  // Throw if NODE_ENV matches' default' or 'local'\n  if ((NODE_ENV === 'default') || (NODE_ENV === 'local')) {\n    _warnOrThrow(\"NODE_ENV value of '\"+NODE_ENV+\"' is ambiguous.\");\n  }\n\n  function _warnOrThrow (msg) {\n    var beStrict = process.env.NODE_CONFIG_STRICT_MODE;\n    var prefix = beStrict ? 'FATAL: ' : 'WARNING: ';\n    var seeURL = 'See https://github.com/lorenwest/node-config/wiki/Strict-Mode';\n\n    console.error(prefix+msg);\n    console.error(prefix+seeURL);\n\n    // Accept 1 and true as truthy values. When set via process.env, Node.js casts them to strings.\n    if ([\"true\", \"1\"].indexOf(beStrict) >= 0) {\n      throw new Error(prefix+msg+' '+seeURL);\n    }\n  }\n}\n\n// Process pre-1.0 utility names\nvar utilWarnings = {};\n['watch', 'setModuleDefaults', 'makeHidden', 'makeImmutable', 'getConfigSources', '_loadFileConfigs',\n '_parseFile', '_attachProtoDeep', '_cloneDeep', '_equalsDeep', '_diffDeep', '_extendDeep', '_stripYamlComments',\n '_stripComments', '_isObject', '_initParam', '_getCmdLineArg'].forEach(function(oldName) {\n\n  // Config.util names don't have underscores\n  var newName = oldName;\n  if (oldName.indexOf('_') === 0) {\n    newName = oldName.substr(1);\n  }\n\n  // Build the wrapper with warning\n  Config.prototype[oldName] = function(){\n\n    // Produce the warning\n    if (!utilWarnings[oldName]) {\n      console.error('WARNING: config.' + oldName + '() is deprecated.  Use config.util.' + newName + '() instead.');\n      console.error('WARNING: See https://github.com/lorenwest/node-config/wiki/Future-Compatibility#upcoming-incompatibilities');\n      utilWarnings[oldName] = true;\n    }\n\n    // Forward the call\n    return util[newName].apply(this, arguments);\n  }\n});\n\n\n\n// Instantiate and export the configuration\nvar config = module.exports = new Config();\n\n// Produce warnings if the configuration is empty\nvar showWarnings = !(util.initParam('SUPPRESS_NO_CONFIG_WARNING'));\nif (showWarnings && Object.keys(config).length === 0) {\n  console.error('WARNING: No configurations found in configuration directory:' +CONFIG_DIR);\n  console.error('WARNING: To disable this warning set SUPPRESS_NO_CONFIG_WARNING in the environment.');\n}\n","/home/travis/build/npmtest/node-npmtest-config/config/defer.js":"// Create a deferredConfig prototype so that we can check for it when reviewing the configs later.\nfunction DeferredConfig () {\n}\nDeferredConfig.prototype.resolve = function (config, original) {};\n\n// Accept a function that we'll use to resolve this value later and return a 'deferred' configuration value to resolve it later.\nfunction deferConfig (func) {\n  var obj = Object.create(DeferredConfig.prototype);\n  obj.resolve = func;\n  return obj;\n}\n\nmodule.exports.deferConfig = deferConfig;\nmodule.exports.DeferredConfig = DeferredConfig;\n","/home/travis/build/npmtest/node-npmtest-config/config/raw.js":"/**\n * This is meant to wrap configuration objects that should be left as is,\n * meaning that the object or its protoype will not be modified in any way\n */\nfunction RawConfig () {\n}\n\nfunction raw(rawObj) {\n  var obj = Object.create(RawConfig.prototype);\n  obj.resolve = function () { return rawObj; }\n  return obj;\n}\n\nmodule.exports.RawConfig = RawConfig;\nmodule.exports.raw = raw;\n"}